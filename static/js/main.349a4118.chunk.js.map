{"version":3,"sources":["logo.svg","serviceWorker.ts","redux/actions/types.ts","redux/reducers/logs.ts","redux/reducers/ability.ts","redux/reducers/index.ts","redux/store.ts","redux/actions/common.ts","config/axiosConfig.ts","redux/actions/pokemon.ts","redux/selectors/ability.ts","App.tsx","redux/selectors/logs.ts","Routes.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","EActionTypes","initialLogState","logs","state","action","type","SAVE_LOG","payload","initialAbilityState","loading","ability","limit","offset","FETCH_ABILITY","data","createRootReducer","history","combineReducers","router","connectRouter","createBrowserHistory","persistConfig","key","storage","blacklist","middlewares","thunk","routerMiddleware","composedEnhancers","compose","applyMiddleware","rootReducer","setValue","saveLog","instance","axios","create","baseURL","defaults","headers","post","put","timeout","getAbility","createSelector","InputWrapper","handleChange","value","hint","className","onChange","e","Number","target","App","dispatch","useDispatch","useSelector","getLogs","useState","lLimit","setLimit","lOffset","setOffset","src","logo","alt","href","rel","style","display","flexWrap","justifyContent","disabled","onClick","a","url","time","Date","toISOString","get","results","fetchAbilities","width","textAlign","map","name","Routes","path","initialState","store","persistedReducer","persistReducer","createStore","configureStore","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.349a4118.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum EActionTypes {\n  FETCH_ABILITY = 'FETCH_ABILITY',\n  FETCH_EVO = 'FETCH_EVO',\n  SAVE_LOG = 'SAVE_LOG'\n}\n","import { EActionTypes } from '../actions/types';\n\nexport interface ILog {\n  url: string;\n  time: string;\n}\n\ninterface ISaveLog {\n  type: EActionTypes.SAVE_LOG;\n  payload: ILog;\n}\n\nexport const initialLogState = []\n\nexport function logs(\n  state: ILog[] = initialLogState,\n  action: ISaveLog\n): ILog[] {\n  switch (action.type) {\n    case EActionTypes.SAVE_LOG:\n      return [...state, action.payload];\n    default:\n      return state;\n  }\n}\n","import { EActionTypes } from '../actions/types';\n\nexport interface IAbilityEnt {\n  name: string;\n  url: string;\n}\n\ninterface IPayload {\n  ability: IAbilityEnt[];\n  limit: number;\n  offset: number;\n}\n\ninterface IFetchAbility {\n  type: EActionTypes.FETCH_ABILITY;\n  payload: {\n    data: IPayload;\n    loading: boolean;\n  };\n}\n\nexport interface IAbility {\n  ability: IAbilityEnt[];\n  loading: boolean;\n  limit: number;\n  offset: number;\n}\n\nexport const initialAbilityState = {\n  loading: false,\n  ability: [],\n  limit: 0,\n  offset: 0,\n};\n\nexport function ability(\n  state: IAbility = initialAbilityState,\n  action: IFetchAbility\n): any {\n  switch (action.type) {\n    case EActionTypes.FETCH_ABILITY:\n      return {\n        ...state,\n        ability: action.payload.data?.ability || state.ability,\n        loading: action.payload.loading,\n        limit: action.payload.data?.limit || state.limit,\n        offset: action.payload.data?.offset,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport { History } from 'history';\nimport { connectRouter } from 'connected-react-router';\nimport { logs } from './logs';\nimport { ability } from './ability';\n\nconst createRootReducer = (history: History) =>\n  combineReducers({\n    router: connectRouter(history),\n    logs,\n    ability,\n  });\n\nexport default createRootReducer;\n","import { createBrowserHistory } from 'history';\nimport thunk from 'redux-thunk';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage/session';\nimport createRootReducer from './reducers';\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION__: any;\n  }\n}\n\nexport const history = createBrowserHistory();\n\nconst persistConfig = {\n  key: 'react-redux-bp',\n  storage,\n  blacklist: ['logs']\n};\n\nconst enhancers = [];\nconst middlewares = [thunk, routerMiddleware(history)];\n\nif (process.env.NODE_ENV === 'development') {\n  const devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__;\n\n  if (typeof devToolsExtension === 'function') {\n    enhancers.push(devToolsExtension());\n  }\n}\n\nconst composedEnhancers = compose(\n  applyMiddleware(...middlewares),\n  ...enhancers\n);\n\nconst rootReducer = createRootReducer(history);\nexport default function configureStore(initialState: any) {\n  const persistedReducer = persistReducer(persistConfig, rootReducer);\n  const store = createStore(persistedReducer, initialState, composedEnhancers);\n  return store;\n}\n","import { EActionTypes } from './types';\nimport { ILog } from '../reducers/logs';\n\ninterface IResponse {\n  type: EActionTypes;\n  payload: { data: any; loading: boolean };\n}\nexport const setValue = (type: EActionTypes, data: any): IResponse => {\n  return {\n    type,\n    payload: {\n      data,\n      loading: data ? false : true,\n    },\n  };\n};\n\nexport const saveLog = (payload: ILog) => {\n  return {\n    type: EActionTypes.SAVE_LOG,\n    payload,\n  };\n};\n","import axios from 'axios';\n\nexport const instance = axios.create({\n  baseURL: 'https://pokeapi.co/api/v2/'\n});\n\ninstance.defaults.headers.post['Content-Type'] =\n  'application/x-www-form-urlencoded';\ninstance.defaults.headers.put['Content-Type'] =\n  'application/x-www-form-urlencoded';\ninstance.defaults.timeout = 60000;\n\n// You can add more config\n","import { EActionTypes } from './types';\nimport { Dispatch } from 'redux';\nimport { setValue, saveLog } from './common';\nimport { instance } from '../../config/axiosConfig';\n\nexport const fetchAbilities = (\n  limit: number = 10,\n  offset: number = 0\n) => async (dispatch: Dispatch<any>) => {\n  dispatch(\n    setValue(EActionTypes.FETCH_ABILITY, null)\n  );\n  try {\n    const url = `ability/?limit=${limit}&offset=${offset}`;\n    dispatch(saveLog({ url, time: new Date().toISOString() }));\n    const { data } = await instance.get(url);\n    dispatch(\n      setValue(EActionTypes.FETCH_ABILITY, {\n        ability: data.results,\n        limit,\n        offset,\n      })\n    );\n  } catch (error) {\n    // handle your error\n  }\n};\n","import { AppState } from '../../interfaces/common';\nimport { createSelector } from 'reselect';\n\nconst ability = (state: AppState) => state.ability;\n\nexport const getAbility = createSelector(ability, (data) => data);\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport logo from './logo.svg';\nimport './App.css';\nimport { fetchAbilities } from './redux/actions/pokemon';\nimport { AppState } from './interfaces/common';\nimport { getLogs } from './redux/selectors/logs';\nimport { getAbility } from './redux/selectors/ability';\n\ninterface Input {\n  handleChange: (value: number) => void;\n  value: number;\n  hint: string;\n}\nfunction InputWrapper({ handleChange, value, hint }: Input) {\n  return (\n    <div className='formWrapper'>\n      <input\n        type='text'\n        onChange={(e) => {\n          handleChange(Number(e.target.value));\n        }}\n        value={value}\n      />\n      <small>{hint}</small>\n    </div>\n  );\n}\n\nfunction App() {\n  const dispatch = useDispatch();\n  const logs = useSelector((state: AppState) => getLogs(state));\n  const { ability, loading, limit, offset } = useSelector((state: AppState) =>\n    getAbility(state)\n  );\n  const [lLimit, setLimit] = useState(limit);\n  const [lOffset, setOffset] = useState(offset);\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <img src={logo} className='App-logo' alt='logo' />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className='App-link'\n          href='https://reactjs.org'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          Learn React\n        </a>\n        <h3>persisted redux state playground</h3>\n        <div className='container'>\n          <div className='data'>\n            <h5>Click on the button to trigger async action</h5>\n            <div\n              style={{\n                display: 'flex',\n                flexWrap: 'wrap',\n                justifyContent: 'center',\n              }}\n            >\n              <button\n                disabled={loading}\n                onClick={() => dispatch(fetchAbilities(lLimit, lOffset))}\n              >\n                {loading ? 'Fetching...' : 'Fetch pokemon ability'}\n              </button>\n              <InputWrapper\n                value={lLimit}\n                handleChange={setLimit}\n                hint='set custom limit'\n              />\n              <InputWrapper\n                value={lOffset}\n                handleChange={setOffset}\n                hint='set custom offset'\n              />\n            </div>\n            <div style={{ width: '100%' }}>\n              <h6 style={{ textAlign: 'center' }}>Pokemon Abilities</h6>\n              <ol>\n                {ability.map(({ name, url }) => (\n                  <li key={name}>\n                    <a\n                      className='link'\n                      href={url}\n                      target='_blank'\n                      rel='noopener noreferrer'\n                    >\n                      {name}\n                    </a>\n                  </li>\n                ))}\n              </ol>\n            </div>\n          </div>\n          <div className='data'>\n            <h6>None persistent async action Logs</h6>\n            <div className='log-header'>\n              <p className='log-title'>DateTime</p>\n              <p className='log-title'>endpoint</p>\n            </div>\n            {logs.map(({ time, url }) => (\n              <div key={url} className='log-header'>\n                <p className='log-text'>{time}</p>\n                <code className='log-time'>{url}</code>\n              </div>\n            ))}\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { AppState } from '../../interfaces/common';\n\nexport const getLogs = (state: AppState) => state.logs;\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { ConnectedRouter } from 'connected-react-router';\nimport App from './App';\nimport { history } from './redux/store';\n\n\nconst Routes: React.FC = () => {\n  return (\n    <ConnectedRouter history={history}>\n      <Switch>\n        <Route path='/'>\n          <App />\n        </Route>\n      </Switch>\n    </ConnectedRouter>\n  );\n};\n\nexport default Routes;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { persistStore } from 'redux-persist';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { initialLogState } from './redux/reducers/logs';\nimport { AppState } from './interfaces/common';\nimport { initialAbilityState } from './redux/reducers/ability';\nimport configureStore from './redux/store';\nimport Routes from './Routes';\n\nexport const initialState: AppState = {\n  logs: initialLogState,\n  ability: initialAbilityState,\n};\n\nconst store = configureStore(initialState);\n\nconst persistor = persistStore(store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Routes />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}